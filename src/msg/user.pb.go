// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: user.proto

package msg

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// / 下发用户数据错误枚举
type S2C_UserData_E_Error int32

const (
	S2C_UserData_Error_ S2C_UserData_E_Error = 0
	// / OK
	S2C_UserData_OK S2C_UserData_E_Error = 1
	// / 没有用户数据
	S2C_UserData_NotExist S2C_UserData_E_Error = 2
)

var S2C_UserData_E_Error_name = map[int32]string{
	0: "Error_",
	1: "OK",
	2: "NotExist",
}
var S2C_UserData_E_Error_value = map[string]int32{
	"Error_":   0,
	"OK":       1,
	"NotExist": 2,
}

func (x S2C_UserData_E_Error) String() string {
	return proto.EnumName(S2C_UserData_E_Error_name, int32(x))
}
func (S2C_UserData_E_Error) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_user_3f5b4c2770ed452d, []int{1, 0}
}

// / 用户数据
type User struct {
	// / id
	ID int64 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	// / 名字
	NickName string `protobuf:"bytes,2,opt,name=NickName,proto3" json:"NickName,omitempty"`
	// / 性别
	Sex int32 `protobuf:"varint,3,opt,name=Sex,proto3" json:"Sex,omitempty"`
	// / 物品
	Items []*Item `protobuf:"bytes,4,rep,name=Items" json:"Items,omitempty"`
	// / 货币
	Monies []*Money `protobuf:"bytes,6,rep,name=Monies" json:"Monies,omitempty"`
	// /等级
	Level int32 `protobuf:"varint,21,opt,name=Level,proto3" json:"Level,omitempty"`
	// /经验
	Exp int64 `protobuf:"varint,22,opt,name=Exp,proto3" json:"Exp,omitempty"`
}

func (m *User) Reset()         { *m = User{} }
func (m *User) String() string { return proto.CompactTextString(m) }
func (*User) ProtoMessage()    {}
func (*User) Descriptor() ([]byte, []int) {
	return fileDescriptor_user_3f5b4c2770ed452d, []int{0}
}
func (m *User) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User.Merge(dst, src)
}
func (m *User) XXX_Size() int {
	return m.Size()
}
func (m *User) XXX_DiscardUnknown() {
	xxx_messageInfo_User.DiscardUnknown(m)
}

var xxx_messageInfo_User proto.InternalMessageInfo

func (m *User) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *User) GetNickName() string {
	if m != nil {
		return m.NickName
	}
	return ""
}

func (m *User) GetSex() int32 {
	if m != nil {
		return m.Sex
	}
	return 0
}

func (m *User) GetItems() []*Item {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *User) GetMonies() []*Money {
	if m != nil {
		return m.Monies
	}
	return nil
}

func (m *User) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *User) GetExp() int64 {
	if m != nil {
		return m.Exp
	}
	return 0
}

// / 服务端下发用户信息
// @msg
type S2C_UserData struct {
	// / 错误枚举
	Err S2C_UserData_E_Error `protobuf:"varint,1,opt,name=Err,proto3,enum=msg.S2C_UserData_E_Error" json:"Err,omitempty"`
	// / 用户数据
	Data *User `protobuf:"bytes,2,opt,name=Data" json:"Data,omitempty"`
}

func (m *S2C_UserData) Reset()         { *m = S2C_UserData{} }
func (m *S2C_UserData) String() string { return proto.CompactTextString(m) }
func (*S2C_UserData) ProtoMessage()    {}
func (*S2C_UserData) Descriptor() ([]byte, []int) {
	return fileDescriptor_user_3f5b4c2770ed452d, []int{1}
}
func (m *S2C_UserData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_UserData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_UserData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *S2C_UserData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_UserData.Merge(dst, src)
}
func (m *S2C_UserData) XXX_Size() int {
	return m.Size()
}
func (m *S2C_UserData) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_UserData.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_UserData proto.InternalMessageInfo

func (m *S2C_UserData) GetErr() S2C_UserData_E_Error {
	if m != nil {
		return m.Err
	}
	return S2C_UserData_Error_
}

func (m *S2C_UserData) GetData() *User {
	if m != nil {
		return m.Data
	}
	return nil
}

// / 更新用户信息请求
// @msg
type C2S_UpdateUserData struct {
	// / 用户id
	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (m *C2S_UpdateUserData) Reset()         { *m = C2S_UpdateUserData{} }
func (m *C2S_UpdateUserData) String() string { return proto.CompactTextString(m) }
func (*C2S_UpdateUserData) ProtoMessage()    {}
func (*C2S_UpdateUserData) Descriptor() ([]byte, []int) {
	return fileDescriptor_user_3f5b4c2770ed452d, []int{2}
}
func (m *C2S_UpdateUserData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_UpdateUserData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_UpdateUserData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *C2S_UpdateUserData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_UpdateUserData.Merge(dst, src)
}
func (m *C2S_UpdateUserData) XXX_Size() int {
	return m.Size()
}
func (m *C2S_UpdateUserData) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_UpdateUserData.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_UpdateUserData proto.InternalMessageInfo

func (m *C2S_UpdateUserData) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func init() {
	proto.RegisterType((*User)(nil), "msg.User")
	proto.RegisterType((*S2C_UserData)(nil), "msg.S2C_UserData")
	proto.RegisterType((*C2S_UpdateUserData)(nil), "msg.C2S_UpdateUserData")
	proto.RegisterEnum("msg.S2C_UserData_E_Error", S2C_UserData_E_Error_name, S2C_UserData_E_Error_value)
}
func (m *User) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.ID))
	}
	if len(m.NickName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUser(dAtA, i, uint64(len(m.NickName)))
		i += copy(dAtA[i:], m.NickName)
	}
	if m.Sex != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.Sex))
	}
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x22
			i++
			i = encodeVarintUser(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Monies) > 0 {
		for _, msg := range m.Monies {
			dAtA[i] = 0x32
			i++
			i = encodeVarintUser(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Level != 0 {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.Level))
	}
	if m.Exp != 0 {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.Exp))
	}
	return i, nil
}

func (m *S2C_UserData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_UserData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Err != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.Err))
	}
	if m.Data != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.Data.Size()))
		n1, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *C2S_UpdateUserData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_UpdateUserData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUser(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	return i, nil
}

func encodeVarintUser(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *User) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovUser(uint64(m.ID))
	}
	l = len(m.NickName)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if m.Sex != 0 {
		n += 1 + sovUser(uint64(m.Sex))
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovUser(uint64(l))
		}
	}
	if len(m.Monies) > 0 {
		for _, e := range m.Monies {
			l = e.Size()
			n += 1 + l + sovUser(uint64(l))
		}
	}
	if m.Level != 0 {
		n += 2 + sovUser(uint64(m.Level))
	}
	if m.Exp != 0 {
		n += 2 + sovUser(uint64(m.Exp))
	}
	return n
}

func (m *S2C_UserData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Err != 0 {
		n += 1 + sovUser(uint64(m.Err))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovUser(uint64(l))
	}
	return n
}

func (m *C2S_UpdateUserData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	return n
}

func sovUser(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozUser(x uint64) (n int) {
	return sovUser(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *User) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: User: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: User: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NickName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			m.Sex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Item{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Monies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Monies = append(m.Monies, &Money{})
			if err := m.Monies[len(m.Monies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exp", wireType)
			}
			m.Exp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Exp |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_UserData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_UserData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_UserData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			m.Err = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Err |= (S2C_UserData_E_Error(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &User{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_UpdateUserData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_UpdateUserData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_UpdateUserData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipUser(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowUser
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUser
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUser
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthUser
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowUser
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipUser(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthUser = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowUser   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("user.proto", fileDescriptor_user_3f5b4c2770ed452d) }

var fileDescriptor_user_3f5b4c2770ed452d = []byte{
	// 333 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x91, 0xc1, 0x4a, 0xf3, 0x40,
	0x14, 0x85, 0x33, 0x49, 0x9b, 0xbf, 0xbd, 0x2d, 0x25, 0x5c, 0x7e, 0x65, 0x2c, 0x18, 0x43, 0x70,
	0x11, 0x28, 0x64, 0x11, 0xdf, 0xc0, 0x36, 0x8b, 0xa2, 0xad, 0x30, 0xa5, 0xeb, 0x10, 0x75, 0x28,
	0x41, 0xd3, 0x94, 0x99, 0x51, 0xea, 0x13, 0xb8, 0xf5, 0x55, 0x7c, 0x0b, 0x97, 0x5d, 0xba, 0x94,
	0xf6, 0x45, 0x64, 0x26, 0xb5, 0xba, 0x3b, 0xe7, 0xdc, 0xc3, 0xcd, 0x97, 0x3b, 0x00, 0x4f, 0x92,
	0x8b, 0x78, 0x25, 0x2a, 0x55, 0xa1, 0x53, 0xca, 0x45, 0x1f, 0x0a, 0xc5, 0xcb, 0x3a, 0xe8, 0x77,
	0xca, 0x6a, 0xc9, 0x5f, 0x6a, 0x13, 0xbe, 0x13, 0x68, 0xcc, 0x25, 0x17, 0xd8, 0x03, 0x7b, 0x3c,
	0xa2, 0x24, 0x20, 0x91, 0xc3, 0xec, 0xf1, 0x08, 0xfb, 0xd0, 0x9a, 0x16, 0x77, 0x0f, 0xd3, 0xbc,
	0xe4, 0xd4, 0x0e, 0x48, 0xd4, 0x66, 0x07, 0x8f, 0x1e, 0x38, 0x33, 0xbe, 0xa6, 0x4e, 0x40, 0xa2,
	0x26, 0xd3, 0x12, 0xcf, 0xa0, 0x39, 0x56, 0xbc, 0x94, 0xb4, 0x11, 0x38, 0x51, 0x27, 0x69, 0xc7,
	0xa5, 0x5c, 0xc4, 0x3a, 0x61, 0x75, 0x8e, 0x21, 0xb8, 0x93, 0x6a, 0x59, 0x70, 0x49, 0x5d, 0xd3,
	0x00, 0xd3, 0x98, 0x68, 0x12, 0xb6, 0x9f, 0xe0, 0x7f, 0x68, 0x5e, 0xf3, 0x67, 0xfe, 0x48, 0x8f,
	0xcc, 0xe2, 0xda, 0xe8, 0x8f, 0xa5, 0xeb, 0x15, 0x3d, 0x36, 0x64, 0x5a, 0x86, 0xaf, 0x04, 0xba,
	0xb3, 0x64, 0x98, 0x69, 0xee, 0x51, 0xae, 0x72, 0x1c, 0x80, 0x93, 0x0a, 0x61, 0xe0, 0x7b, 0xc9,
	0x89, 0xd9, 0xfc, 0x77, 0x1e, 0xa7, 0x59, 0x2a, 0x44, 0x25, 0x98, 0x6e, 0xe1, 0x29, 0x34, 0x74,
	0x68, 0x7e, 0xea, 0x87, 0x54, 0x37, 0x99, 0x89, 0xc3, 0x01, 0xfc, 0xdb, 0xd7, 0x11, 0xc0, 0x35,
	0x22, 0xf3, 0x2c, 0x74, 0xc1, 0xbe, 0xb9, 0xf2, 0x08, 0x76, 0xa1, 0x35, 0xad, 0x54, 0xba, 0x2e,
	0xa4, 0xf2, 0xec, 0xf0, 0x1c, 0x70, 0x98, 0xcc, 0xb2, 0xf9, 0xea, 0x3e, 0x57, 0xfc, 0x80, 0xf3,
	0x7b, 0xca, 0xb6, 0x3e, 0xe5, 0x25, 0xfd, 0xd8, 0xfa, 0x64, 0xb3, 0xf5, 0xc9, 0xd7, 0xd6, 0x27,
	0x6f, 0x3b, 0xdf, 0xda, 0xec, 0x7c, 0xeb, 0x73, 0xe7, 0x5b, 0xb7, 0xae, 0x79, 0x84, 0x8b, 0xef,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x44, 0x30, 0xce, 0x30, 0xb0, 0x01, 0x00, 0x00,
}
