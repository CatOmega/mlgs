// Code generated by protoc-gen-pbex2-go. DO NOT EDIT IT!!!
// source: money.proto

/*
It has these top-level messages:
	Money
	S2C_UpdateMoney
*/

package msg

import "sync"
import protocol "github.com/trist725/mgsu/network/protocol/protobuf/v2"

var _ *sync.Pool
var _ = protocol.PH

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// message [Money] begin
func (m *Money) ResetEx() {
	m.Type = 0
	m.Num = 0

}

func (m Money) Clone() *Money {
	n, ok := g_Money_Pool.Get().(*Money)
	if !ok || n == nil {
		n = &Money{}
	}

	n.Type = m.Type
	n.Num = m.Num

	return n
}

func Clone_Money_Slice(dst []*Money, src []*Money) []*Money {
	for _, i := range dst {
		Put_Money(i)
	}
	dst = []*Money{}

	for _, i := range src {
		dst = append(dst, i.Clone())
	}

	return dst
}

func New_Money() *Money {
	m := &Money{}
	return m
}

var g_Money_Pool = sync.Pool{}

func Get_Money() *Money {
	m, ok := g_Money_Pool.Get().(*Money)
	if !ok {
		m = New_Money()
	} else {
		if m == nil {
			m = New_Money()
		} else {
			m.ResetEx()
		}
	}
	return m
}

func Put_Money(i interface{}) {
	if m, ok := i.(*Money); ok && m != nil {
		g_Money_Pool.Put(i)
	}
}

// message [Money] end
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// message [S2C_UpdateMoney] begin
func (m *S2C_UpdateMoney) ResetEx() {

	for _, i := range m.Monies {
		Put_Money(i)
	}
	m.Monies = []*Money{}

}

func (m S2C_UpdateMoney) Clone() *S2C_UpdateMoney {
	n, ok := g_S2C_UpdateMoney_Pool.Get().(*S2C_UpdateMoney)
	if !ok || n == nil {
		n = &S2C_UpdateMoney{}
	}

	if len(m.Monies) > 0 {
		for _, i := range m.Monies {
			if i != nil {
				n.Monies = append(n.Monies, i.Clone())
			} else {
				n.Monies = append(n.Monies, nil)
			}
		}
	} else {
		n.Monies = []*Money{}
	}

	return n
}

func Clone_S2C_UpdateMoney_Slice(dst []*S2C_UpdateMoney, src []*S2C_UpdateMoney) []*S2C_UpdateMoney {
	for _, i := range dst {
		Put_S2C_UpdateMoney(i)
	}
	dst = []*S2C_UpdateMoney{}

	for _, i := range src {
		dst = append(dst, i.Clone())
	}

	return dst
}

func (S2C_UpdateMoney) V2() {
}

func (S2C_UpdateMoney) MessageID() protocol.MessageID {
	return "msg.S2C_UpdateMoney"
}

func S2C_UpdateMoney_MessageID() protocol.MessageID {
	return "msg.S2C_UpdateMoney"
}

func New_S2C_UpdateMoney() *S2C_UpdateMoney {
	m := &S2C_UpdateMoney{
		Monies: []*Money{},
	}
	return m
}

var g_S2C_UpdateMoney_Pool = sync.Pool{}

func Get_S2C_UpdateMoney() *S2C_UpdateMoney {
	m, ok := g_S2C_UpdateMoney_Pool.Get().(*S2C_UpdateMoney)
	if !ok {
		m = New_S2C_UpdateMoney()
	} else {
		if m == nil {
			m = New_S2C_UpdateMoney()
		} else {
			m.ResetEx()
		}
	}
	return m
}

func Put_S2C_UpdateMoney(i interface{}) {
	if m, ok := i.(*S2C_UpdateMoney); ok && m != nil {
		g_S2C_UpdateMoney_Pool.Put(i)
	}
}

func init() {
	Protocol.Register(
		&S2C_UpdateMoney{},
		func() protocol.IMessage { return Get_S2C_UpdateMoney() },
		func(msg protocol.IMessage) { Put_S2C_UpdateMoney(msg) },
	)
}

// message [S2C_UpdateMoney] end
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
