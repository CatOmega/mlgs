// Code generated by protoc-gen-mgo-go. DO NOT EDIT IT!!!
// source: account.proto

/*
It has these top-level messages:
	Account
*/

package model

import "fmt"
import "encoding/json"
import "sync"
import "github.com/name5566/leaf/db/mongodb"
import "gopkg.in/mgo.v2"

var _ = fmt.Sprintf
var _ = json.Marshal
var _ *sync.Pool
var _ *mongodb.DialContext
var _ *mgo.DBRef

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// collection [Account] begin

/// 帐号表 @collection
type Account struct {
	/// 帐号id @_id
	ID int64 `bson:"ID"`
	/// 帐号名
	Name string `bson:"Name"`
	/// 游客名
	VName string `bson:"VName"`
	/// 密码
	Password string `bson:"Password"`
	/// 注册时间
	RegisterTime int64 `bson:"RegisterTime"`
	/// 帐号状态 1=游客, 2=注册, 3=绑定
	State E_AccountState `bson:"State"`
	/// 密钥
	Token string `bson:"Token"`
	/// 上次服务器ID
	LastLoginServerID int32 `bson:"LastLoginServerID"`
	/// 登录过服务器ID列表
	LoginList []int32 `bson:"LoginList"`
	/// 渠道名
	ChannelName string `bson:"ChannelName"`
	/// 渠道帐号
	ChannelAccount string `bson:"ChannelAccount"`
	/// 封号标记
	Ban int32 `bson:"Ban"`
}

func New_Account() *Account {
	m := &Account{
		LoginList: []int32{},
	}
	return m
}

func (m Account) String() string {
	ba, _ := json.Marshal(m)
	return fmt.Sprintf("{\"Account\":%s}", string(ba))
}

func (m *Account) Reset() {
	m.ID = 0
	m.Name = ""
	m.VName = ""
	m.Password = ""
	m.RegisterTime = 0
	m.State = 0
	m.Token = ""
	m.LastLoginServerID = 0
	m.LoginList = []int32{}
	m.ChannelName = ""
	m.ChannelAccount = ""
	m.Ban = 0

}

func (m Account) Clone() *Account {
	n, ok := g_Account_Pool.Get().(*Account)
	if !ok || n == nil {
		n = &Account{}
	}

	n.ID = m.ID
	n.Name = m.Name
	n.VName = m.VName
	n.Password = m.Password
	n.RegisterTime = m.RegisterTime
	n.State = m.State
	n.Token = m.Token
	n.LastLoginServerID = m.LastLoginServerID

	if len(m.LoginList) > 0 {
		n.LoginList = make([]int32, len(m.LoginList))
		copy(n.LoginList, m.LoginList)
	} else {
		n.LoginList = []int32{}
	}

	n.ChannelName = m.ChannelName
	n.ChannelAccount = m.ChannelAccount
	n.Ban = m.Ban

	return n
}

func Clone_Account_Slice(dst []*Account, src []*Account) []*Account {
	for _, i := range dst {
		Put_Account(i)
	}
	dst = []*Account{}

	for _, i := range src {
		dst = append(dst, i.Clone())
	}

	return dst
}

func FindOne_Account(session *mongodb.Session, query interface{}) (one *Account, err error) {
	one = Get_Account()
	err = session.DB(dbName).C(TblAccount).Find(query).One(one)
	if err != nil {
		Put_Account(one)
		return nil, err
	}
	return
}

func FindSome_Account(session *mongodb.Session, query interface{}) (some []*Account, err error) {
	some = []*Account{}
	err = session.DB(dbName).C(TblAccount).Find(query).All(&some)
	if err != nil {
		return nil, err
	}
	return
}

func UpdateSome_Account(session *mongodb.Session, selector interface{}, update interface{}) (info *mgo.ChangeInfo, err error) {
	info, err = session.DB(dbName).C(TblAccount).UpdateAll(selector, update)
	return
}

func Upsert_Account(session *mongodb.Session, selector interface{}, update interface{}) (info *mgo.ChangeInfo, err error) {
	info, err = session.DB(dbName).C(TblAccount).Upsert(selector, update)
	return
}

func UpsertID_Account(session *mongodb.Session, id interface{}, update interface{}) (info *mgo.ChangeInfo, err error) {
	info, err = session.DB(dbName).C(TblAccount).UpsertId(id, update)
	return
}

func (m Account) Insert(session *mongodb.Session) error {
	return session.DB(dbName).C(TblAccount).Insert(m)
}

func (m Account) Update(session *mongodb.Session, selector interface{}, update interface{}) error {
	return session.DB(dbName).C(TblAccount).Update(selector, update)
}

func (m Account) UpdateByID(session *mongodb.Session) error {
	return session.DB(dbName).C(TblAccount).UpdateId(m.ID, m)
}

func (m Account) RemoveByID(session *mongodb.Session) error {
	return session.DB(dbName).C(TblAccount).RemoveId(m.ID)
}

var g_Account_Pool = sync.Pool{}

func Get_Account() *Account {
	m, ok := g_Account_Pool.Get().(*Account)
	if !ok {
		m = New_Account()
	} else {
		if m == nil {
			m = New_Account()
		} else {
			m.Reset()
		}
	}
	return m
}

func Put_Account(i interface{}) {
	if m, ok := i.(*Account); ok && m != nil {
		g_Account_Pool.Put(i)
	}
}

// collection [Account] end
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
