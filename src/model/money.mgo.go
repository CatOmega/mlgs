// Code generated by protoc-gen-mgo-go. DO NOT EDIT IT!!!
// source: money.proto

/*
It has these top-level messages:
	Money
*/

package model

import "fmt"
import "encoding/json"
import "sync"
import "github.com/trist725/myleaf/db/mongodb"
import "gopkg.in/mgo.v2"

var _ = fmt.Sprintf
var _ = json.Marshal
var _ *sync.Pool
var _ *mongodb.DialContext
var _ *mgo.DBRef

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// collection [Money] begin

/// 用户货币信息
type Money struct {
	/// 类型, 1=金币,2=钻石,3积分
	Type int32 `bson:"Type"`
	/// 数量
	Num int64 `bson:"Num"`
}

func New_Money() *Money {
	m := &Money{}
	return m
}

func (m Money) String() string {
	ba, _ := json.Marshal(m)
	return fmt.Sprintf("{\"Money\":%s}", string(ba))
}

func (m *Money) Reset() {
	m.Type = 0
	m.Num = 0

}

func (m Money) Clone() *Money {
	n, ok := g_Money_Pool.Get().(*Money)
	if !ok || n == nil {
		n = &Money{}
	}

	n.Type = m.Type
	n.Num = m.Num

	return n
}

func Clone_Money_Slice(dst []*Money, src []*Money) []*Money {
	for _, i := range dst {
		Put_Money(i)
	}
	dst = []*Money{}

	for _, i := range src {
		dst = append(dst, i.Clone())
	}

	return dst
}

var g_Money_Pool = sync.Pool{}

func Get_Money() *Money {
	m, ok := g_Money_Pool.Get().(*Money)
	if !ok {
		m = New_Money()
	} else {
		if m == nil {
			m = New_Money()
		} else {
			m.Reset()
		}
	}
	return m
}

func Put_Money(i interface{}) {
	if m, ok := i.(*Money); ok && m != nil {
		g_Money_Pool.Put(i)
	}
}

// collection [Money] end
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
